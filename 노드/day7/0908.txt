
MongoDB 문법

데이터베이스 -> 컬렉션 -> document(문서)

데이터베이스확인
show dbs;

데이터베이스 생성및 선택
use 데이터베이스명;
use fontenddb;

* 데이터베이스가 없으면 생성, 있으면 선택합니다.
* 데이터베이스의 자료가 없을 경우 show dbs에서 나타나지 않습니다.

컬렉션 생성
db.createCollection('컬렉션명');
db.createCollection('testCollection');

컬렉션 확인
show collections;

컬렉션 삭제
db.컬렉션명.drop();
db.testCollection.drop();

연습용 컬렉션 만들기
db.createCollection('member');


use fontenddb;
db.createCollection('member');

document추가
db.컬렉션명.insert({객체});
db.member.insert({'userid':'apple','userpw':'1111'});
db.member.insert({'userid':'banana','userpw':'2222','username':'반하나'});
db.member.insert({"userid":"orange","userpw":"3333","gender":"남자"});
db.member.insert({"userid":"melon","userpw":"4444","gender":"남자", "username":"이메론"});
db.member.insert({"userid":"cherry","userpw":"5555", "username":"채리","gender":"여자","point":2000});
db.member.insert({"userid":"avocado","userpw":"6666", "username":"안카도","gender":"남자","point":1500});
db.member.insert({"userid":"berry","userpw":"7777", "username":"배애리","gender":"여자","point":1800});
db.member.insert({"userid":"coconut","userpw":"8888", "username":"고코넛","gender":"남자","point":1700});


document 확인
db.컬렉션명.find();
db.member.find();

db.컬렉션명.find().pretty();
db.member.find().pretty();

db.컬렉션명.find(객체).pretty();
db.member.find({'userid':'apple'}).pretty();

  "_id" : ObjectId("613802fc2369b0b8c5931fe1")
  * _id는 각 document의 유일한 키로 쓰이는 값입니다.
  -> document를 저장하고 확인

document 비교연산 -> 값이 크다 작다의 아니고 하나의 변수값을 선언하는것
$eq : 주어진 값과 일치하는 값을 찾습니다.
$gt : 주어진 값보다 큰 값을 찾습니다.
$gte : 주어진 값보다 크거나 같은 값을 찾습니다.
$lt : 주어진 값보다 작은 값을 찾습니다.
$lte : 주어진 값보다 작거나 같은 값을 찾습니다.
$ne : 주어진 값과 일치하지 않는 값을 찾습니다.
$in : 주어진 배열 안에 속하는 값을 찾습니다.
$nin : 주어진 배열 안에 속하지 않는 값을 찾습니다.

문제.
포인트가 1700점 이상인 멤버를 검색합니다.
db.member.find({point:{$gte:1700}}).pretty();

document 논리연산자
$or : 주어진 조건 중 하나라도 true일 때 true인 결과를 찾습니다.
$and : 주어진 모든 조건이 true일 때 true인 결과를 찾습니다.
$not : 주어진 조건이 false일 때 true, true일 때 false인 결과를 찾습니다.

문제.
아이디가 "melon"이고 이름"이메론"인 멤버를 검색합니다.

db.member.find({$and:[{'userid':'melon'},{'username':'이메론'}]}).pretty();

실습.
1. 이름이 "안카도"인 멤버를 검색합니다.
db.member.find({'username':'안카도'}).pretty();

2. 포인트가 1800보다 작거나 같은 멤버를 검색합니다.
db.member.find({'point':{$lte:1800}}).pretty();

3. 아이디가 "apple" 이거나 "banana"인 멤버를 검색합니다.
db.member.find({$or:[{'userid':'apple'},{'userid':'banana'}]}).pretty();

4. 성별이 "여자"이고 포인트가 1700이상인 멤버를 검색합니다.
db.member.find({$and:[{'gender':'여자'},{'point':{$gte:1700}}]}).pretty();



document 정렬
db.컬렉션명.find().sort(객체);

{key:value} -> key는 데이터의 field이름,value의 값은 1(오름차순) 또는 -1(내림차순)
여러 key를 입력할 수 있고, 먼저 입력한 key가 우선권을 갖음.
db.member.find().sort()
db.member.find().sort({"_id":-1}).pretty();


document의 개수를 제한
limit():출력할 데이터 개수를 제한할때 사용
db.member.find().limit(3).pretty();

document 데이터를 생략후 출력
skip():출력할 데이터 개수를 제한할때 사용
db.컬렉션명.find().skip(생략할개수);
db.member.find().skip(2).pretty();

문제.
member 컬렉션의 데이터를 아래와 같이 출력
1.
db.member.find().limit(3).pretty();

2.
db.member.find().skip(3).limit(3).pretty();

3.
db.member.find().skip(6).limit(3).pretty();

4.
db.member.find().sort({"_id":-1}).skip(3).limit(3).pretty();

document의 수정
1.특정 field 업데이트
db.컬렉션명.update(객체,{$set:바뀔객체});
db.member.update({'userid':'avocado'},{$set:{"username":"안카도1"}});
db.member.update({'userid':'berry'},{$set:{"userpw":"8888"}});

문제.
1. 아이디 melon를 찾았어  "gender":"남자"를  "gender":"여자"로 수정
 db.member.update({''userid';'melon'},{$set:{'gender':'여자'}});
2. 아이디 banana를 찾았어 'username':'반하나'를 'username':'버네너'로 수정
 db.member.update({''userid'; bananan'},{$set:{'username':'버네너'}});


2.document replace(객체를 아예 바꿈)
db.컬렉션명.update(변경할 객체, 바뀔객체);
db.member.update({"userid":"avocado"},{"userid":"avocado","userpw":"5555","username":"안복도","gender":"남자","age":30,"point":900});



db.member.update({"_id":objectId("생성된아이디코드")},{"userid":"avocado","userpw":"5555","name":"안복도","gender":"남자","age":30,"point":900}); 
->document replace는 _id가 바뀌지 않음

----------------->수정후 다시 확인
3.특정 field 제거
db.컬렉션명.update(변경할 객체,{$unset:{제거할 객체}});
db.member.update({"username":"안복도"},{$unset:{age:1}})
->age:1
-> true의 의미(삭제);
----------------->수정후 다시 확인

4.특정 document가 존재하지 않을 경우 새로 추가 존재하는 경우는 기존의 객체들을 삭제하고 새로운 객체를 추가
db.컬렉션명.update(추가 할 객체, 추가 할 객체...,{upsert:true});
db.member.update({userid:"avocado"}, {"age":30,"kor":100,"eng":90,"math":70},{upsert:true});  삭제되고 수정
db.member.update({userid:"avocado1"}, {"userid":"avocado2","age":30,"kor":100,"eng":90,"math":70},{upsert:true});




document의 삭제
db.member.remove(객체);
db.member.remove({"userid":"avocado2"});

------------------>수정후 다시 확인
db.member.remove({"_id":objectId("객체")});
------------------>수정후 다시 확인