리액트
- 페이스북에서 만든 UI를 만들기 위한 자바스크립트 라이브러리
- View 레이어를 담당(MVC)
- React(웹 어플리케이션), React Native(모바일 어플리케이션), React Electron(데스크랍 어플리케이션)
- 그외 
  : Angular(프레임워크)
  : Vue(프레임워크와 라이브러리의 중간)

리액트 특징
- Component로 이루어진 UI라이브러리
- Component는 한 가지 기능을 수행하는 UI단위
- 리액트 어블리케이션은 꼭 하나 이상의 Component로 이루어져 있음
- 최상위 컴포터넌트는 Root
- 컴포넌트 내부의 State가 존재함
- 메모리에 Virtual DOM Tree를 가지고 있음 
    -> 트리에있는 자식컴포넌트의 render함수가 호출이 됬을때, 이전의 DOM Tree와 비교해서 변경되는 DOM Tree만 업데이트를 함. 
    -> 특정 부분만 rendering 시켜서 DOM의 성능을 많이 떨어뜨리지 않게된다.


Component 
state : 데이터의 상태를 나타내는 객체 
render : 사용자에게 어떻게 표기 될것인지를 나타내는 함수


state의 데이터 변경 -> render함수 호출
-> State 객체의 값이 변경되면 render 함수가 자동적으로 호출되면서 변경된 state의 값이 화면에 나타낼 수 있도록 render 함수가 계속 반복적으로 호출
기존 JS : 이벤트가 일어나면 DOM의 내용을 바꿈
리액트 : 데이터 상태값을 통해 화면을 갱신


[1] 리액트 시작하기
https://ko.reactjs.org/docs/getting-started.html

리액트 툴
1.터미널
    cmder

2. 노드 -  자바스크립트를 실행할수 있는 환경

3. 크롬브라우저 -> react developer tools
4. vscode에서 react js code snippet

리액트 시작
1. cdn 이용하는 방법

https://ko.reactjs.org/docs/cdn-links.html
<script crossorigin src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>

*babel : 과거 브라우저에 맞도록 스크립트를 변경해주는 기능을 가지고 있음
https://babeljs.io/docs/en/babel-standalone
 <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>


 2. create-react-app
 npm i -g yarn 
 (*-g는 글로벌 설치)
 yarn create react-app test
 cd test
 yarn start

프로젝트 구조
.gitignore 
    - 명시된 파일들은 git에 저장되지 않음
package.json
    - npm에서 버전을 관리할 때 프로젝트에서 외부적으로 쓰고 있는 라이브러리의 버전들과 스크립트들이 명시
README.md
    - 프로젝트에 대해 설명하는 파일
public 디렉토리
    - 사용자에게 배포할 때 외부적으로 보여지는 리소스들을 표현
src 디렉토리
    - 리액트 소스코드를 포함

숨겨진 툴
babel
    - 자바스크립트의 트랜스컴파일러
    - typescript, jsx 등 순수 자바스크립트가 아닌문법을 브라우저가 이해하도록 변환해주는 역활
webpack
    - 소스코드나 리소스 이미지들을 한 번에 묶어서 번들단위로 사용자에게 제공
    - 자바스크립트 코드를 줄여주고 긴 변수나 함수의 이름을 해커들이 알아볼 수 없도록 변경해 주는 역할
ESlint
    - 코드에 잘못된점이 있으면 경고를 표시해주는 툴
Jest
    - 코드를 작성할 때 유닛테스트를 할 수 있도록 해주는 툴
PostCSS
    - CSS 전처리기 중 하나
    - 정해진 프레임워크에 따라 css를 작성하면 그 css를 브라우저가 이해할 수 있는 css코드로 변환
    - scss, less와 비슷하지만 PostCSS는 다양한 플러그인이 있어서 확장성이 좋음



[2] JSX
- 페이스북에서 개발한 확장 구문
- UI를 화면에 나타내는 파일을 만들어가는것( 실제는 자바스크립트)
- 태그는 꼭 닫혀야함 
    ex) <hr> 처럼 쓰면 안된다 
          <hr/>처럼 써야된다.

- 두 개 이상의 태그는 하나의 태그로 감싸져야함 
-------------------------------------------------

ex)
    function App() {
    return (
        <div>
        Hello React!
        <Test /> 
        <Test /> 
        <Test /> 
        <Test /> 
        </div>
    );
    }
-------------------------------------------------
** div를 사용하고 싶지 않다면 <>(플래그먼트)를 사용하여 이름없는 태그를 사용하면 됨

- CSS속성은 카멜케이스 표기 
    ex) backgroundColor
- 주석 표기법 --> {/* */}


비구조화 할당
- 객체 안에 있는 값을 추출해서 변수 혹은 상수에 저장
-------------------------------------------------

ex)
기존
const student = {'iu':'아이유', 'ive':'아이브, 'idle':'아이들'}

비구조화 형식
const {iu , ive, idle} = student
-------------------------------------------------


props
- 컴포넌트에 매개변수를 전달
-------------------------------------------------

ex)
<컴포넌트명 속성="값"></컴포넌트명>

function 컴포넌트명(props){
    return <div>{props.속성}</div>
}
-------------------------------------------------

default Props
- 컴포넌트의 props를 지정하지 않았을때 기본값을 설정
-------------------------------------------------
컴포넌트명.defaultProps = {
    설정할 properties
}

props.children
-------------------------------------------------

- 컴포넌트 태그 사이에 넣은 값을 조회
-------------------------------------------------
ex)
function 컴포넌트명({children}){
    return (
        <div>
            {children}
        </div>
    )
}
-------------------------------------------------

삼항연산자를 사용하여 조건 렌더링
1. {조건식 ? true : false}
2. {조건식 && true}
-------------------------------------------------
1.
    <div style= {{color}}>
        안녕하세요! {name}님!
        {isVIP ? <b>❤😊</b> : null}
    </div>

2.
    <div style= {{color}}>
        안녕하세요! {name}님!
        {isVIP && <b>❤😊</b>}
    </div>


-------------------------------------------------

[3] REACT Hook  함수
{useState} 함수
- 컴포넌트 에서 동적인 값의 상태(state)를 다루는 Hook 함수

const [현재상태변수 , 설정함수] = useState(초기값)
ex)
const [number, setNumber] = useState(0); // 비구조화 할당방식

*Hook 함수
상태 관리를 다루던 클래스를 좀 더 쉽게 다룰 수 있도록 만들어진 함수

spread(JS문법)
- 객체 또는 배열을 펼쳐 저장할 수 있음.
-------------------------------------------------
ex)
const dog = {
    name: '멍멍이'
}
const cuteDog = {
    ...dog,
    age : 10
}

const whiteCuteDog = {
    ...cuteDog,
    color:'white'
}
//dog객체를 복사해와서 cuteDog에 넣어지게끔 해줌
// 결과적으로 whiteCuteDog는 name, age , color 키값을 갖게 됨
-------------------------------------------------

리액트 State에서 객체 수정하기
    setUsers({
        ...users,
        [name]:value
    })
- 리액트에서는 상태값의 불변성을 지켜줘야 함.
- 리액트 컴포넌트에서 상태가 업데이트 되었음을 감지할 수 있음.
- 리액트에서 객체를 업데이트 할 때는 기존 객체를 직접 수정하면 안되고, 새로운 객체를 만들어서 새 객체에 변화를 줘야함.



[4] useRef 함수
- 특정 엘리먼트에 접근하거나 스크롤바 위치를 설정할 때
- 외부 라이브러리를 사용할 떄

useRef 객체를 생성 -> 가상DOM에 ref값을 설정
변수명.current.focus();
*current : 가상 DOM을 가르킴

useRef 할수있는것
1. setTimeout, setInterval을 통해서 만들어진 id
2. 외부 라이브러리를 사용하여 생성된 객체 관리
3. DOM관리